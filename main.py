import logging
import json
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
)
import db
import os
from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize OpenAI client (optional)
openai_api_key = os.getenv('OPENAI_API_KEY') or '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'
if openai_api_key:
    client = OpenAI(api_key=openai_api_key)
    logger.info("OpenAI API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
else:
    client = None
    logger.warning("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. AI-–ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# States for ConversationHandler
(
    MAIN_MENU,
    HELP_MENU,
    ADD_NAME, ADD_JOB, ADD_EXPERIENCE, ADD_HELP, ADD_CONTACTS,
    EDIT_MENU, EDIT_FIELD, EDIT_VALUE,
    NEED_HELP_ASK,
    PROFILE_COMPLETED,
    SEARCH_HELPERS
) = range(13)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db.init_db()
    
    # Set up menu commands when bot starts
    await setup_menu_commands(context.application)
    
    keyboard = [
        [InlineKeyboardButton("–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å", callback_data="want_to_help")],
        [InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="need_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def show_my_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    profile = db.get_helper(user_id)
    if profile:
        text = (f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üë§ –ò–º—è: {profile['name']}\n"
                f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile['job']}\n"
                f"üìÖ –û–ø—ã—Ç: {profile['experience']}\n"
                f"ü§ù –ß–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å: {profile['help']}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {profile['contacts']}")
    else:
        text = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è."
    await update.message.reply_text(text)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "want_to_help":
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="add_profile")],
            [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=reply_markup
        )
        return HELP_MENU
    elif query.data == "need_help":
        await query.edit_message_text('–ö–∞–∫–∞—è –ø–æ–º–æ—â—å –≤–∞–º –Ω—É–∂–Ω–∞?')
        return NEED_HELP_ASK
    else:
        await query.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.')
        return MAIN_MENU

async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "add_profile":
        await query.edit_message_text('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        return ADD_NAME
    elif query.data == "edit_profile":
        await query.edit_message_text('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!')
        return ConversationHandler.END
    elif query.data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å", callback_data="want_to_help")],
            [InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="need_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=reply_markup
        )
        return MAIN_MENU
    else:
        await query.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.')
        return HELP_MENU

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text('–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?')
    return ADD_JOB

async def add_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['job'] = update.message.text
    await update.message.reply_text('–í–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?')
    return ADD_EXPERIENCE

async def add_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['experience'] = update.message.text
    await update.message.reply_text('–ß–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å?')
    return ADD_HELP

async def add_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['help'] = update.message.text
    await update.message.reply_text('–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, email –∏ —Ç.–¥.)?')
    return ADD_CONTACTS

async def add_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['contacts'] = update.message.text
    user_id = update.effective_user.id
    db.add_helper(
        user_id,
        context.user_data['name'],
        context.user_data['job'],
        context.user_data['experience'],
        context.user_data['help'],
        context.user_data['contacts']
    )
    profile_text = (
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n'
        f'üë§ –ò–º—è: {context.user_data["name"]}\n'
        f'üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {context.user_data["job"]}\n'
        f'üìÖ –û–ø—ã—Ç: {context.user_data["experience"]}\n'
        f'ü§ù –ß–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å: {context.user_data["help"]}\n'
        f'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {context.user_data["contacts"]}\n\n'
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?'
    )
    keyboard = [
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_from_profile")],
        [InlineKeyboardButton("üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_my_profile")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        profile_text,
        reply_markup=reply_markup
    )
    return PROFILE_COMPLETED


async def need_help_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text
    context.user_data['help_request'] = user_response
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏ –≤ –±–∞–∑–µ
    helpers_count = db.get_helpers_count()
    if helpers_count == 0:
        await update.message.reply_text(
            f'–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏: "{user_response}"\n\n'
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. '
            '–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –∂–µ–ª–∞—é—â–∏–µ –ø–æ–º–æ—á—å.'
        )
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton("ü§ñ –ù–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å AI", callback_data="find_ai_helpers")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cancel_search")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f'–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏: "{user_response}"\n\n'
        f'–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å {helpers_count} –ø–æ–º–æ—â–Ω–∏–∫–æ–≤. –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é AI?',
        reply_markup=reply_markup
    )
    return SEARCH_HELPERS

async def profile_completed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main_from_profile":
        keyboard = [
            [InlineKeyboardButton("–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å", callback_data="want_to_help")],
            [InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="need_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=reply_markup
        )
        return MAIN_MENU
    elif query.data == "show_my_profile":
        user_id = query.from_user.id
        profile = db.get_helper(user_id)
        if profile:
            text = (f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                    f"üë§ –ò–º—è: {profile['name']}\n"
                    f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile['job']}\n"
                    f"üìÖ –û–ø—ã—Ç: {profile['experience']}\n"
                    f"ü§ù –ß–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å: {profile['help']}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {profile['contacts']}")
        else:
            text = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è."
        await query.edit_message_text(text)
        return ConversationHandler.END
    elif query.data == "finish_profile":
        await query.edit_message_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!')
        return ConversationHandler.END
    else:
        await query.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.')
        return PROFILE_COMPLETED

async def find_best_helpers_with_ai(help_request: str) -> list:
    """–ù–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é ChatGPT API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ OpenAI –∫–ª–∏–µ–Ω—Ç
        if client is None:
            logger.warning("OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.")
            all_helpers = db.get_all_helpers()
            return all_helpers[:3]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_helpers = db.get_all_helpers()
        
        if not all_helpers:
            return []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
        helpers_info = []
        for i, helper in enumerate(all_helpers):
            helpers_info.append(f"{i+1}. –ò–º—è: {helper['name']}, –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {helper['job']}, –û–ø—ã—Ç: {helper['experience']}, –ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å: {helper['help']}")
        
        prompt = f"""
–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{help_request}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏:
{chr(10).join(helpers_info)}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–µ—Ä–∏ –¢–û–ü-3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤. 
–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –æ–ø—ã—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á–µ–º –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∫–∞–∂–¥—ã–π –ø–æ–º–æ—â–Ω–∏–∫.

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –º–∞—Å—Å–∏–≤–æ–º –∏–Ω–¥–µ–∫—Å–æ–≤ (–Ω–∞—á–∏–Ω–∞—è —Å 0) –ª—É—á—à–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:
{{"best_helpers": [–∏–Ω–¥–µ–∫—Å1, –∏–Ω–¥–µ–∫—Å2, –∏–Ω–¥–µ–∫—Å3]}}

–ù–∞–ø—Ä–∏–º–µ—Ä: {{"best_helpers": [0, 2, 1]}}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–¥–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=200
        )
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        ai_response = response.choices[0].message.content.strip()
        result = json.loads(ai_response)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        best_helpers = []
        for idx in result.get("best_helpers", []):
            if 0 <= idx < len(all_helpers):
                best_helpers.append(all_helpers[idx])
        
        return best_helpers[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å AI: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
        all_helpers = db.get_all_helpers()
        return all_helpers[:3]

async def search_helpers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "find_ai_helpers":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        help_request = context.user_data.get('help_request', '')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å
        if client is not None:
            await query.edit_message_text("ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –∏—â–µ—Ç –ª—É—á—à–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤...")
        else:
            await query.edit_message_text("üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤...")
        
        # –ò—â–µ–º –ª—É—á—à–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é AI
        best_helpers = await find_best_helpers_with_ai(help_request)
        
        if best_helpers:
            if client is not None:
                response = f"ü§ñ AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: \"{help_request}\"\n\n"
                response += "üéØ –í–æ—Ç –¢–û–ü-3 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:\n\n"
            else:
                response = f"üìã –í–∞—à –∑–∞–ø—Ä–æ—Å: \"{help_request}\"\n\n"
                response += "üë• –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏:\n\n"
            
            for i, helper in enumerate(best_helpers, 1):
                response += (f"{i}. üë§ {helper['name']}\n"
                           f"   üíº {helper['job']}\n"
                           f"   üìÖ –û–ø—ã—Ç: {helper['experience']}\n"
                           f"   ü§ù {helper['help']}\n"
                           f"   üìû {helper['contacts']}\n\n")
            
            response += "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –∏–∑ –Ω–∏—Ö –Ω–∞–ø—Ä—è–º—É—é."
        else:
            response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        keyboard = [
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_from_search")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(response, reply_markup=reply_markup)
        return SEARCH_HELPERS
    
    elif query.data == "cancel_search":
        await query.edit_message_text(
            '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞!'
        )
        return ConversationHandler.END
    
    elif query.data == "back_to_main_from_search":
        keyboard = [
            [InlineKeyboardButton("–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å", callback_data="want_to_help")],
            [InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="need_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=reply_markup
        )
        return MAIN_MENU
    
    else:
        await query.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.')
        return SEARCH_HELPERS

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    helpers_count = db.get_helpers_count()
    helpers = db.get_all_helpers()
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤: {helpers_count}\n\n"
    
    if helpers:
        stats_text += "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:\n"
        for i, helper in enumerate(helpers, 1):
            stats_text += (f"{i}. {helper['name']} - {helper['job']}\n")
    else:
        stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    await update.message.reply_text(stats_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:**

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/show_my_form - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–º–æ—â–Ω–∏–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫–∞
‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
2. –í—ã–±–µ—Ä–∏—Ç–µ "–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å" –∏–ª–∏ "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
"""
    await update.message.reply_text(help_text)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("–Ø —Ö–æ—á—É –ø–æ–º–æ—á—å", callback_data="want_to_help")],
        [InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="need_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def setup_menu_commands(application):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("menu", "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("show_my_form", "üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"),
    ]
    await application.bot.set_my_commands(commands)

if __name__ == '__main__':
    TOKEN = os.getenv('TELEGRAM_TOKEN') or '7799371983:AAEa3w1CGc6BwUcWG2MoVxfL5bJOgg8OhJ4'
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('menu', menu_command)],
        states={
            MAIN_MENU: [CallbackQueryHandler(main_menu)],
            HELP_MENU: [CallbackQueryHandler(help_menu)],
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            ADD_JOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_job)],
            ADD_EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_experience)],
            ADD_HELP: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_help)],
            ADD_CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_contacts)],
            NEED_HELP_ASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, need_help_ask)],
            PROFILE_COMPLETED: [CallbackQueryHandler(profile_completed)],
            SEARCH_HELPERS: [CallbackQueryHandler(search_helpers)],
            # To be filled with other state handlers
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True  # Fix the warning about CallbackQueryHandler tracking
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('cancel', cancel))
    app.add_handler(CommandHandler('show_my_form', show_my_form))
    app.add_handler(CommandHandler('stats', show_stats))
    app.add_handler(CommandHandler('help', help_command))

    app.run_polling() 